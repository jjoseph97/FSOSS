-- NOTE: If you are running the EXTENSION script; please CREATE first
DROP EXTENSION pgcrypto;
CREATE EXTENSION pgcrypto;

--the orignal drop tables. RUN THIS FIRST
DROP TABLE SECURITY_ROLE CASCADE;
DROP TABLE ADMINISTRATOR_ACCOUNT CASCADE;
DROP TABLE SITE CASCADE;
DROP TABLE QUESTION_FORMAT CASCADE;
DROP TABLE MEAL CASCADE;
DROP TABLE AGE CASCADE;
DROP TABLE GENDER CASCADE;
DROP TABLE QUESTION_TOPIC CASCADE;
DROP TABLE PARTICIPANT CASCADE;
DROP TABLE POTENTIAL_SURVEY_WORD CASCADE;
DROP TABLE UNIT CASCADE;
DROP TABLE ADMINISTRATOR_ROLE CASCADE;
DROP TABLE SURVEY_VERSION CASCADE;
DROP TABLE QUESTION CASCADE;
DROP TABLE SURVEY_WORD CASCADE;
DROP TABLE SUBMITTED_SURVEY CASCADE;
DROP TABLE QUESTION_SELECTION CASCADE;
DROP TABLE PARTICIPANT_RESPONSE CASCADE;
DROP TABLE SURVEY_QUESTION CASCADE;

--the new drop tables. After running the above, always run this one after.
DROP TABLE SECURITY_ROLE CASCADE;
DROP TABLE ADMINISTRATOR_ACCOUNT CASCADE;
DROP TABLE SITE CASCADE;
DROP TABLE QUESTION_FORMAT CASCADE;
DROP TABLE MEAL CASCADE;
DROP TABLE AGE_RANGE CASCADE;
DROP TABLE GENDER CASCADE;
DROP TABLE QUESTION_TOPIC CASCADE;
DROP TABLE PARTICIPANT_TYPE CASCADE;
DROP TABLE POTENTIAL_SURVEY_WORD CASCADE;
DROP TABLE UNIT CASCADE;
DROP TABLE ADMINISTRATOR_ROLE CASCADE;
DROP TABLE SURVEY_VERSION CASCADE;
DROP TABLE QUESTION CASCADE;
DROP TABLE SURVEY_WORD CASCADE;
DROP TABLE SUBMITTED_SURVEY CASCADE;
DROP TABLE QUESTION_SELECTION CASCADE;
DROP TABLE PARTICIPANT_RESPONSE CASCADE;
DROP TABLE SURVEY_QUESTION CASCADE;


-- create table for Security ROLE
CREATE TABLE SECURITY_ROLE
(
	SECURITY_ROLE_ID SERIAL PRIMARY KEY NOT NULL,
	SERCUTIY_DESCRIPTION VARCHAR(100) NOT NULL
);


-- create table Administrator Account
CREATE TABLE ADMINISTRATOR_ACCOUNT
(
	ADMINISTRATOR_ACCOUNT_ID SERIAL PRIMARY KEY NOT NULL,
	USERNAME VARCHAR(50) UNIQUE NOT NULL,
	ADMIN_PASSWORD VARCHAR(60) NOT NULL, -- Changed to VARCHAR(50) for hashing
	FIRST_NAME VARCHAR(50) NOT NULL,
	LAST_NAME VARCHAR(50) NOT NULL,
	ACTIVE_YN BOOLEAN DEFAULT TRUE NOT NULL,
	DATE_CREATED TIMESTAMP DEFAULT NOW() NOT NULL,
	DATE_MODIFIED TIMESTAMP NULL
);
-- create table for Site
CREATE TABLE SITE
(
	SITE_ID SERIAL PRIMARY KEY NOT NULL,
	SITE_NAME VARCHAR(100) NOT NULL,
	DATE_MODIFIED TIMESTAMP NOT NULL,
	ADMINISTRATOR_ACCOUNT_ID INT NOT NULL,
	IS_CLOSED_YN BOOL DEFAULT FALSE NOT NULL,
	
	FOREIGN KEY (ADMINISTRATOR_ACCOUNT_ID) REFERENCES ADMINISTRATOR_ACCOUNT (ADMINISTRATOR_ACCOUNT_ID)
);

-- create table Question Format
CREATE TABLE QUESTION_FORMAT
(
	QUESTION_FORMAT_ID SERIAL PRIMARY KEY NOT NULL,
	QUESTION_FORMAT_NAME VARCHAR(100) NOT NULL
);

-- create table Meal
CREATE TABLE MEAL
(
	MEAL_ID SERIAL PRIMARY KEY NOT NULL,
	MEAL_NAME VARCHAR(100) NOT NULL
);

-- create table Age
CREATE TABLE AGE_RANGE
(
	AGE_RANGE_ID SERIAL PRIMARY KEY NOT NULL,
	AGE_RANGE_DESCRIPTION VARCHAR(100) NOT NULL
);

-- create table Gender
CREATE TABLE GENDER
(
	GENDER_ID SERIAL PRIMARY KEY NOT NULL,
	GENDER_DESCRIPTION VARCHAR(100) NOT NULL
);

-- create table Question Topic
CREATE TABLE QUESTION_TOPIC
(
	QUESTION_TOPIC_ID SERIAL PRIMARY KEY NOT NULL,
	QUESTION_TOPIC_DESCRIPTION VARCHAR(100) NOT NULL
);

-- create table Participant
CREATE TABLE PARTICIPANT_TYPE
(
	PARTICIPANT_TYPE_ID SERIAL PRIMARY KEY NOT NULL,
	PARTICIPANT_DESCRIPTION VARCHAR(100) NOT NULL
);

-- create table for Potential Survey Word
CREATE TABLE POTENTIAL_SURVEY_WORD
(
	SURVEY_WORD_ID SERIAL PRIMARY KEY NOT NULL,
	ADMINISTRATOR_ACCOUNT_ID INT NOT NULL,
	SURVEY_ACCESS_WORD VARCHAR(8) NOT NULL,
	DATE_MODIFIED TIMESTAMP DEFAULT NOW() NOT NULL,
	ARCHIVE_YN BOOLEAN DEFAULT FALSE NOT NULL,
	
	FOREIGN KEY (ADMINISTRATOR_ACCOUNT_ID) REFERENCES ADMINISTRATOR_ACCOUNT (ADMINISTRATOR_ACCOUNT_ID)
);

-- create table Unit
CREATE TABLE UNIT
(
	UNIT_ID SERIAL PRIMARY KEY NOT NULL,
	UNIT_NUMBER VARCHAR(100) NOT NULL,
	SITE_ID INT NOT NULL,
	DATE_MODIFIED TIMESTAMP NOT NULL,
	ADMINISTRATOR_ACCOUNT_ID INT NOT NULL,
	IS_CLOSED_YN BOOL DEFAULT FALSE NOT NULL,	

	FOREIGN KEY (ADMINISTRATOR_ACCOUNT_ID) REFERENCES ADMINISTRATOR_ACCOUNT (ADMINISTRATOR_ACCOUNT_ID),
	FOREIGN KEY (SITE_ID) REFERENCES SITE (SITE_ID)
);

-- create table Administrator Role
CREATE TABLE ADMINISTRATOR_ROLE
(
	ADMINISTRATOR_ACCOUNT_ID INT NOT NULL REFERENCES ADMINISTRATOR_ACCOUNT (ADMINISTRATOR_ACCOUNT_ID),
	SECURITY_ROLE_ID INT NOT NULL REFERENCES SECURITY_ROLE (SECURITY_ROLE_ID),
	DATE_MODIFIED TIMESTAMP DEFAULT NOW() NOT NULL,
	
	PRIMARY KEY (ADMINISTRATOR_ACCOUNT_ID, SECURITY_ROLE_ID)
);

-- create table Survey Version
CREATE TABLE SURVEY_VERSION
(
	SURVEY_VERSION_ID SERIAL PRIMARY KEY NOT NULL,
	ADMINISTRATOR_ACCOUNT_ID INT NOT NULL,
	START_DATE TIMESTAMP DEFAULT NOW() NOT NULL, 
	END_DATE TIMESTAMP NULL,
	
	FOREIGN KEY (ADMINISTRATOR_ACCOUNT_ID) REFERENCES ADMINISTRATOR_ACCOUNT (ADMINISTRATOR_ACCOUNT_ID)
);

-- create table Question
CREATE TABLE QUESTION
(
	QUESTION_ID SERIAL PRIMARY KEY NOT NULL,
	ADMINISTRATOR_ACCOUNT_ID INT NOT NULL,
	QUESTION_FORMAT_ID INT NOT NULL, 
	QUESTION_TOPIC_ID INT NOT NULL,
	QUESTION_TEXT VARCHAR(250) NOT NULL,
	DATE_CREATED TIMESTAMP DEFAULT NOW() NOT NULL,
	IS_EXTRA BOOLEAN DEFAULT FALSE NOT NULL,
	
	FOREIGN KEY (ADMINISTRATOR_ACCOUNT_ID) REFERENCES ADMINISTRATOR_ACCOUNT (ADMINISTRATOR_ACCOUNT_ID),
	FOREIGN KEY (QUESTION_FORMAT_ID) REFERENCES QUESTION_FORMAT (QUESTION_FORMAT_ID),
	FOREIGN KEY (QUESTION_TOPIC_ID) REFERENCES QUESTION_TOPIC (QUESTION_TOPIC_ID)
);

--create Table Survey Word
CREATE TABLE SURVEY_WORD
(
	SURVEY_WORD_ID INT REFERENCES POTENTIAL_SURVEY_WORD (SURVEY_WORD_ID) NOT NULL, 
	SITE_ID INT REFERENCES SITE (SITE_ID) NOT NULL,
	DATE_USED TIMESTAMP DEFAULT NOW() NOT NULL,
	
	PRIMARY KEY (SURVEY_WORD_ID, SITE_ID)
);

-- create table Submitted Survey
CREATE TABLE SUBMITTED_SURVEY
(
	SUBMITTED_SURVEY_ID SERIAL PRIMARY KEY NOT NULL,
	SURVEY_VERSION_ID INT NOT NULL,
	UNIT_ID INT NOT NULL,
	MEAL_ID INT NOT NULL,
	PARTICIPANT_TYPE_ID INT NOT NULL,
	AGE_RANGE_ID INT NOT NULL,
	GENDER_ID INT NOT NULL,
	DATE_ENTERED TIMESTAMP DEFAULT NOW() NOT NULL, 
	CONTACT_STATUS VARCHAR (100) NOT NULL,
	CONTACT_ROOM_NUMBER VARCHAR(50) NULL,
	CONTACT_PHONE_NUMBER VARCHAR(20) NULL,
	
	FOREIGN KEY (SURVEY_VERSION_ID) REFERENCES SURVEY_VERSION (SURVEY_VERSION_ID),
	FOREIGN KEY (AGE_RANGE_ID) REFERENCES AGE_RANGE (AGE_RANGE_ID),
	FOREIGN KEY (UNIT_ID) REFERENCES UNIT (UNIT_ID),
	FOREIGN KEY (MEAL_ID) REFERENCES MEAL (MEAL_ID),
	FOREIGN KEY (PARTICIPANT_TYPE_ID) REFERENCES PARTICIPANT_TYPE (PARTICIPANT_TYPE_ID),
	FOREIGN KEY (GENDER_ID) REFERENCES GENDER (GENDER_ID)
);

-- create table Question Selection
CREATE TABLE QUESTION_SELECTION
(
	QUESTION_SELECTION_ID SERIAL PRIMARY KEY NOT NULL,
	QUESTION_ID INT NOT NULL,
	QUESTION_SELECTION_TEXT VARCHAR(100) NOT NULL,
	QUESTION_SELECTION_VALUE VARCHAR(100) NOT NULL,
	
	FOREIGN KEY (QUESTION_ID) REFERENCES QUESTION (QUESTION_ID)
);

-- create table Survey Question
CREATE TABLE PARTICIPANT_RESPONSE
(
	SUBMITTED_SURVEY_ID INT NOT NULL REFERENCES SUBMITTED_SURVEY (SUBMITTED_SURVEY_ID),
	QUESTION_ID INT NOT NULL REFERENCES QUESTION (QUESTION_ID),
	PARTICIPANT_ANSWER VARCHAR(100) NULL,
	
	PRIMARY KEY (SUBMITTED_SURVEY_ID, QUESTION_ID)
);

-- create table Survey Question
CREATE TABLE SURVEY_QUESTION
(
	SURVEY_VERSION_ID INT NOT NULL REFERENCES SURVEY_VERSION (SURVEY_VERSION_ID),
	QUESTION_ID INT NOT NULL REFERENCES QUESTION (QUESTION_ID),
	
	PRIMARY KEY (SURVEY_VERSION_ID, QUESTION_ID)
);

-- Create Webmaster
INSERT INTO ADMINISTRATOR_ACCOUNT (USERNAME, ADMIN_PASSWORD, FIRST_NAME, LAST_NAME, DATE_CREATED, DATE_MODIFIED)
VALUES ('webmaster', crypt('password', gen_salt('bf')), 'Web', 'Master', Now(), NOW());